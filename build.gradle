/*
 * Adapted from The MIT License (MIT)
 *
 * Copyright (c) 2020-2020 DaPorkchop_
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * Any persons and/or organizations using this software must include the above copyright notice and this permission notice,
 * provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
plugins {
    id 'java'
    id 'maven-publish'
}

ext {
    // General configuration
    javaVersion = '11'
    programVersion = '0.0.10-MOT-SNAPSHOT'

    // Dependency versions
    junitVersion = '4.13.1'
    lombokVersion = '1.18.20'
    leveldbVersion = '1.0.1'
    porklibVersion = '0.5.5-SNAPSHOT'
    snappyVersion = '0.5'
}

group = 'net.daporkchop'
version = programVersion

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    maven {
        name = 'MemoriesOfTime'
        url = 'https://repo.lanink.cn/repository/maven-public/'
    }
    maven {
        name = 'DaPorkchop_'
        url = 'https://maven.daporkchop.net/'
    }
    maven {
        name = 'DaPorkchop_'
        url = 'https://maven.daporkchop.net/'
    }
    maven {
        name = 'NukkitX Snapshots'
        url = 'https://repo.nukkitx.com/snapshot'
    }
    mavenCentral()
}

dependencies {
    implementation "net.daporkchop.lib:natives:$porklibVersion"
    implementation "com.hivemc.leveldb:leveldb-api:$leveldbVersion"
    implementation "com.hivemc.leveldb:leveldb:$leveldbVersion"
    implementation "org.iq80.snappy:snappy:$snappyVersion"

    testImplementation "net.daporkchop.lib:encoding:$porklibVersion"
    testImplementation "junit:junit:$junitVersion"

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

tasks.register('sourceJar', Jar) {
    from sourceSets.main.allSource
}

publishing {
    repositories {
        if (MOT_MAVEN_USERNAME != null && MOT_MAVEN_PASSWORD != null)
        maven {
            credentials {
                username = MOT_MAVEN_USERNAME
                password = MOT_MAVEN_PASSWORD
            }
            name = 'repo-lanink-cn'
            url = version.endsWith('SNAPSHOT') ? 'https://repo.lanink.cn/repository/maven-snapshots/' : 'https://repo.lanink.cn/repository/maven-releases/'
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'leveldb-mcpe-jni'
            version = project.version

            from components.java

            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
}

publish.dependsOn(publishToMavenLocal)
build.dependsOn(publish)

if (System.getProperty('os.name').toLowerCase().startsWith('windows')) {
    throw new IllegalStateException("You are running Windows, which is bad and you should feel bad.\nThis means that native libraries cannot be built.")
} else {
    tasks.register('compileNatives', Exec) {
        workingDir projectDir
        commandLine 'make', "-j${Runtime.runtime.availableProcessors()}"
    }

    compileJava.dependsOn compileNatives

    tasks.register('cleanNatives', Exec) {
        workingDir projectDir
        commandLine 'make', 'clean'
    }

    clean.dependsOn cleanNatives
}
